org: hunterlong
app: pantry
service: pantry
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    JWT_SECRET_KEY: ${param:JWT_SECRET_KEY} 
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - ${param:TODO_TABLE_ARN}
        - ${param:USER_TABLE_ARN}
        - ${param:USER_TABLE_ARN}/index/*
  httpApi:
    authorizers:
      myAuthorizer:
        type: request
        functionName: myAuthorizer
        enableSimpleResponses: true

functions:
  register:
    handler: src/functions/auth/register.default
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: src/functions/auth/login.default
    events:
      - httpApi:
          path: /login
          method: post
  addTodo:
    handler: src/functions/todos/addTodo.default
    events:
      - httpApi:
          path: /todos
          method: post
  getTodos:
    handler: src/functions/todos/getTodos.default
    events:
      - httpApi:
          path: /todos
          method: get
  getTodoById:
    handler: src/functions/todos/getTodoById.default
    events:
      - httpApi:
          path: /todos/{id}
          method: get
  updateTodo:
    handler: src/functions/todos/updateTodo.default
    events:
      - httpApi:
          path: /todos/{id}
          method: put
  deleteTodo:
    handler: src/functions/todos/deleteTodo.default
    events:
      - httpApi:
          path: /todos/{id}
          method: delete
          authorizer:
            type: request
            name: myAuthorizer
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
  myAuthorizer:
    handler: src/functions/auth/jwtAuthorizer.default



resources: 
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TodoTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

# Reference on GlobalSecondaryIndexes:
# https://stackoverflow.com/questions/57322645/how-to-define-dynamodb-table-with-global-secondary-index-in-serverless-framework

# Reference for secondary index IAM permissions
# https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/iam-policy-specific-table-indexes.html
