org: hunterlong
app: pantry
service: pantry
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    JWT_SECRET_KEY: ${param:JWT_SECRET_KEY}
    OPENAI_API_KEY: ${param:OPENAI_API_KEY}
    BUCKET_NAME: ${param:BUCKET_NAME}
    S3_ACCESS_KEY: ${param:S3_ACCESS_KEY}
    S3_SECRET_ACCESS_KEY: ${param:S3_SECRET_ACCESS_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource: 
        - ${param:FOOD_TABLE_ARN}
        - ${param:FOOD_TABLE_ARN}/index/*
        - ${param:USER_TABLE_ARN}
        - ${param:USER_TABLE_ARN}/index/*
        - ${param:PHOTO_BUCKET_ARN}

functions:
  jwtAuthorizer:
    handler: src/functions/auth/jwtAuthorizer.default
  register:
    handler: src/functions/auth/register.default
    events:
      - http:
          path: /register
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
  login:
    handler: src/functions/auth/login.default
    events:
      - http:
          path: /login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
  createFood:
    handler: src/functions/food/createFood.default
    timeout: 30
    events:
      - http:
          path: /food
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
          authorizer:
            name: jwtAuthorizer
  getFoodByUserId:
    handler: src/functions/food/getFoodByUserId.default
    events:
      - http:
          path: /food/user
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
          authorizer:
            name: jwtAuthorizer
  updateFood:
    handler: src/functions/food/updateFood.default
    events:
      - http:
          path: /food/{foodId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
          authorizer:
            name: jwtAuthorizer
  deleteFood:
    handler: src/functions/food/deleteFood.default
    events:
      - http:
          path: /food/{foodId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
          authorizer:
            name: jwtAuthorizer
  generatePresignedPutURL:
    handler: src/functions/photos/generatePresignedPutURL.default
    events:
      - http:
          path: /photos
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
          authorizer:
            name: jwtAuthorizer
resources: 
  Resources:
    FoodTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FoodTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
plugins:
  - serverless-offline

# Reference on GlobalSecondaryIndexes:
# https://stackoverflow.com/questions/57322645/how-to-define-dynamodb-table-with-global-secondary-index-in-serverless-framework

# Reference for secondary index IAM permissions
# https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/iam-policy-specific-table-indexes.html